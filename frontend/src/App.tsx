import { useState } from 'react'
import axios from 'axios'
import './App.css'
import Logo from './components/Logo'

interface TravelPlan {
  answer: string
  timestamp: string
}

interface ApiResponse {
  answer: string
}

interface ApiError {
  detail: string
}

const SendIcon = () => (
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
    <path d="m22 2-7 20-4-9-9-4 20-7z"/>
    <path d="M22 2 11 13"/>
  </svg>
)

const LoaderIcon = () => (
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
    <path d="M21 12a9 9 0 1 1-6.219-8.56"/>
  </svg>
)

const CalendarIcon = () => (
  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
    <rect x="3" y="4" width="18" height="18" rx="2" ry="2"/>
    <line x1="16" y1="2" x2="16" y2="6"/>
    <line x1="8" y1="2" x2="8" y2="6"/>
    <line x1="3" y1="10" x2="21" y2="10"/>
  </svg>
)

function App() {
  const [userInput, setUserInput] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [travelPlan, setTravelPlan] = useState<TravelPlan | null>(null)
  const [error, setError] = useState<string | null>(null)

  // Get API URL from environment or use default
  const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:8000'

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!userInput.trim()) return

    setIsLoading(true)
    setError(null)
    setTravelPlan(null)

    try {
      const response = await axios.post<ApiResponse>(`${API_BASE_URL}/travel/query`, {
        query: userInput
      })

      if (response.status === 200 && response.data.answer) {
        setTravelPlan({
          answer: response.data.answer,
          timestamp: new Date().toLocaleString()
        })
      } else {
        setError("Invalid response from server")
      }
    } catch (err) {
      if (axios.isAxiosError(err)) {
        const errorData = err.response?.data as ApiError
        setError(errorData?.detail || err.message || 'Network error occurred')
      } else {
        setError('An unexpected error occurred')
      }
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="app">
      <main className="main">
        <div className="container">
          <div className="welcome-section">
            <Logo width={300} height={90} className="welcome-logo" />
            <h2>AI Travel Planning Assistant</h2>
            <p>Tell me about your travel plans and I'll help you create a detailed itinerary.</p>
          </div>

          <form onSubmit={handleSubmit} className="input-form">
            <div className="input-group">
              <input
                type="text"
                value={userInput}
                onChange={(e) => setUserInput(e.target.value)}
                placeholder="e.g. Plan a 5-day trip to Paris with a budget of $2000"
                className="input-field"
                disabled={isLoading}
                aria-label="Travel request input"
              />
              <button 
                type="submit" 
                className="submit-button"
                disabled={isLoading || !userInput.trim()}
                aria-label="Submit travel request"
              >
                {isLoading ? (
                  <LoaderIcon />
                ) : (
                  <SendIcon />
                )}
              </button>
            </div>
          </form>

          {isLoading && (
            <div className="loading-section" role="status" aria-live="polite">
              <LoaderIcon />
              <p>Generating your travel plan...</p>
            </div>
          )}

          {error && (
            <div className="error-section" role="alert">
              <p className="error-message">{error}</p>
            </div>
          )}

          {travelPlan && (
            <div className="travel-plan-section">
              <div className="plan-header">
                <h3>Your Travel Plan</h3>
                <div className="plan-meta">
                  <div className="meta-item">
                    <CalendarIcon />
                    <span>Generated: {travelPlan.timestamp}</span>
                  </div>
                </div>
              </div>
              
              <div className="plan-content">
                <div className="plan-divider"></div>
                <div className="plan-text">
                  {travelPlan.answer.split('\n').map((line, index) => (
                    <p key={index}>{line}</p>
                  ))}
                </div>
                <div className="plan-divider"></div>
              </div>

              <div className="plan-footer">
                <p className="disclaimer">
                  This travel plan is generated by AI. Please verify all information, 
                  especially prices, operating hours, and travel requirements before your trip.
                </p>
              </div>
            </div>
          )}
        </div>
      </main>
    </div>
  )
}

export default App 